swagger: '2.0'
info:
  description: |
    Dataleon Platform API is structured around REST. Having predictable resource-oriented URLs, our APIs accept form-encoded request bodies, return JSON responses, and use standard HTTP response codes, authentication, and verbs.
    
    ### Supported document formats
    Dataleon currently supports PNG, JPEG, and PDF, TIFF formats.

    ### File size
    Image files sent to the Dataleon API should not exceed 100 MB (4 MB for the free tier). Reducing your file size can significantly improve throughput; however, be careful not to reduce image quality in the process.
    
    ### Image and PDF requirements
    - For PDF and TIFF files, up to 2000 pages (only first two pages for the free tier) are processed.
    - Dimensions at least 50 x 50 pixels and at most 10000 x 10000 pixels.
    - The PDF dimensions must be at most 17 x 17 inches, corresponding to legal or A3 paper sizes and smaller.

  version: 4.0.0
  title: Cirom - Dataleon API Inference
  termsOfService: https://dataleon.ai/terms-of-use
  contact:
    email: support@dataleon.ai

tags:
- name: Accounting
  description: APIs for extract data on accounting documents
 
# schemes:
# - http
paths:
  /criom/invoice/prod:
    post:
      tags:
      - Accounting
      summary: Extract entities from an invoice using OCR.
      description: This endpoint allows you to extract entities from an invoice using OCR (Optical Character Recognition) technology. Entities can include information such as the customer name, invoice number, date, and total amount due. By sending a POST request to this endpoint with an invoice image, the OCR technology will extract the relevant entities and return them in a structured format. This endpoint is useful for automating the data extraction process and improving the accuracy of your accounting operations. The extracted entities can be used for tasks such as record-keeping, payment tracking, and tax purposes.
      consumes:
      - application/json
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        description: file to upload
        required: true
        type: file
      - name: workspace_id
        in: formData
        description: Add your workspace_id
        required: true
        type: string
      - name: spliting_document
        in: formData
        description: Manual splitting data
        required: false
        type: string
      - name: callback_url
        in: formData
        description: Offline processing
        required: false
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Accounting'
        401:
          description: No valid API key provided.
        403:
          description: The API key doesn't have permissions to perform the request.
        422:
          description: The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate),
        429:
          description: Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.
      security:
      - api_key: []

  /criom/invoice/dev:
    post:
      tags:
      - Accounting
      summary: Extract entities from an invoice using OCR.
      description: This endpoint allows you to extract entities from an invoice using OCR (Optical Character Recognition) technology. Entities can include information such as the customer name, invoice number, date, and total amount due. By sending a POST request to this endpoint with an invoice image, the OCR technology will extract the relevant entities and return them in a structured format. This endpoint is useful for automating the data extraction process and improving the accuracy of your accounting operations. The extracted entities can be used for tasks such as record-keeping, payment tracking, and tax purposes.
      consumes:
      - application/json
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        description: file to upload
        required: true
        type: file
      - name: workspace_id
        in: formData
        description: Add your workspace_id
        required: true
        type: string
      - name: spliting_document
        in: formData
        description: Manual splitting data
        required: false
        type: string
      - name: callback_url
        in: formData
        description: Offline processing
        required: false
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Accounting'
        401:
          description: No valid API key provided.
        403:
          description: The API key doesn't have permissions to perform the request.
        422:
          description: The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate),
        429:
          description: Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.
      security:
      - api_key: []

  /task/{Id}:
    get:
      tags:
      - Operating
      summary: Retrieve the status and data of the request.
      description: This feature allows you to retrieve the status and data of a request using the provided request ID. By providing the request ID, you can check the current status of the request, whether it is pending or complete, and retrieve any relevant data associated with the request. This feature is useful for tracking the progress of a request and obtaining data for further processing or analysis. 
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: Id
        in: path
        description: ID of task
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
        401:
          description: No valid API key provided.
        403:
          description: The API key doesn't have permissions to perform the request.
        404:
          description: The requested workfow doesn't exist.
        422:
          description: The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate),
        429:
          description: Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.
      security:
      - api_key: []

securityDefinitions:
  api_key:
    type: apiKey
    name: Api-Key
    in: header

definitions:
  Accounting:
    type: object
    properties:
      entities:
        type: array
        description: "A list of entities detected in the document"
        items:
          type: object
          properties:
            id:
              type: string
              description: "The unique identifier for the entity"
              example: "194e5d63-675c-4975-94ba-d82124b2c914"
            confidence:
              type: number
              description: "The confidence score for the detection"
              example: 0.9984347224235535
            name:
              type: string
              description: "The name of the detected entity"
              example: "FirstName"
            bounding_box:
              type: array
              description: "The coordinates of the bounding box around the detected entity"
              items:
                type: array
                items:
                  type: number
              example: [[-1, 83], [711, 83], [711, 795], [-1, 795]]
            page:
              type: integer
              description: "The page number of the document where the entity was detected"
              example: 1
            document_number:
              type: integer
              description: "The number of the document in a multi-document analysis"
              example: 1
            document_id:
              type: string
              description: "The unique identifier of the document"
              example: "Nxb2bxSBKJnu5KmZulra4YCg-face"
            step:
              type: string
              description: "The step in the document analysis pipeline where the entity was detected"
              example: "step-3"
            action:
              type: string
              description: "The action performed on the detected entity"
              example: "face"
            value:
              type: string
              description: "The value of the detected entity"
              example: "GÃ©rard"
            document_name:
              type: string
              description: "The name of the document file"
              example: "Nxb2bxSBKJnu5KmZulra4YCg-doc.jpg"  
      class:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              description: The unique identifier associated with the class.
              example: "90a1b06a-4ac5-45d2-a9a4-e5ad1bdef59f"
            confidence:
              type: number
              description: The confidence level associated with the class.
              example: 1
            name:
              type: string
              description: The name of the class.
              example: "Invoice"
            page:
              type: integer
              description: The page number associated with the class.
              example: 1
            document_number:
              type: integer
              description: The document number associated with the class.
              example: 1
            document_id:
              type: string
              description: The unique identifier associated with the document.
              example: "Nxb2bxSBKJnu5KmZulra4YCg-doc"
            step:
              type: string
              description: The step of the class.
              example: "step-3"
            action:
              type: string
              description: The action associated with the class.
              example: "document_type"
            document_name:
              type: string
              description: The name of the document associated with the class.
              example: "Nxb2bxSBKJnu5KmZulra4YCg-doc.jpg"
      metadata: 
        type: object
        properties:
          task_id:
            type: string
            description: The unique identifier for the task
            example: '9dba60fa-0ac8-47b6-a81e-22a7c834f8f6'
          status:
            type: string
            description: The current status of the task
            example: PROCESSED

  Request:
    type: object
    properties:
      task_id:
        type: string
        description: The unique identifier for the task
        example: '9dba60fa-0ac8-47b6-a81e-22a7c834f8f6'
      status:
        type: string
        description: The current status of the task
        example: WAITING
      link:
        type: string
        description: The link to the task results
        example: https://id.dataleon.ai/w/9dba60fasz
      code:
        type: string
        description: The qr code for the task
        example: iVBORw0KGgoAAAANSUhEUgAAAgg==

  ApiResponse:
    type: object
    properties:
      status:
        example: "notStarted|running|failed|succeeded"
        type: string


# Added by API Auto Mocking Plugin
host: inference.eu-west-1.dataleon.ai
schemes:
 - https
# Added by API Auto Mocking Plugin
basePath: /
